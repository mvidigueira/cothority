syntax = "proto2";

package skipchain;

// Skipchain should come from skipchain/proto.go, but the way the SkipBlockFix
// is embedded in SkipBlock is difficult to handle automatically in proto.awk.
// For this reason, this file is created manually.
// MANUAL

option java_package = "ch.epfl.dedis.lib.proto";
option java_outer_classname = "SkipchainProto";

import "onet.proto";

// StoreSkipBlock - Requests a new skipblock to be appended to the given
// SkipBlock. If the given TargetSkipChainID is an empty slice, then a genesis
// block is created.  Otherwise, the new block is added to the skipchain
// specified by TargetSkipChainID.
message StoreSkipBlock {
    required bytes targetSkipChainID = 1;
	required SkipBlock newBlock = 2;
	optional bytes signature = 3;
}

// StoreSkipBlockReply - returns the signed SkipBlock with updated backlinks
// and the previous block if it exists.
message StoreSkipBlockReply {
    optional SkipBlock previous = 1;
    required SkipBlock latest = 2;
}

// GetAllSkipChainIDs - returns the SkipBlockIDs of the genesis blocks
// of all of the known skipchains.
message GetAllSkipChainIDs {
}

// GetAllSkipChainIDsReply - reply to GetAllSkipchains
message GetAllSkipChainIDsReply {
	repeated bytes skipChainIDs = 1;
}

// GetSingleBlock asks for a single block.
message GetSingleBlock {
	required bytes id = 1;
}

// GetSingleBlockByIndex searches for a block with the given index following
// the genesis-block
message GetSingleBlockByIndex {
	required bytes genesis = 1;
	required sint32 index = 2;
}

// GetSingleBlockByIndexReply returns the block and a set of links that proves
// this block to be attached to the genesis block.
message GetSingleBlockByIndexReply {
	required SkipBlock skipblock = 1;
	repeated ForwardLink links = 2;
}

// GetUpdateChain - the client sends the hash of the last known
// Skipblock and will get back a list of all necessary SkipBlocks
// to get to the latest.
message GetUpdateChain {
	// latest known id of a block.
	required bytes latestID = 1;
}

// GetUpdateChainReply - returns the shortest chain to the current SkipBlock,
// starting from the SkipBlock the client sent
message GetUpdateChainReply {
	// update is the shortest path from the requested block to the latest
	// block.
	repeated SkipBlock update = 1;
}

message SkipBlock {
    required sint32 index = 1;
    required sint32 height = 2;
    required sint32 max_height = 3;
    required sint32 base_height = 4;
    repeated bytes backlinks = 5;
    repeated bytes verifiers = 6;
    required bytes genesis = 7;
    required bytes data = 8;
    required onet.Roster roster = 9;
    required bytes hash = 10;
    repeated ForwardLink forward = 11;
    optional bytes payload = 12;
    optional uint32 signature_scheme = 13;
}

message ForwardLink {
    required bytes from = 1;
    required bytes to = 2;
    optional onet.Roster newRoster = 3;
    required ByzcoinSig signature = 4;
}

message ByzcoinSig {
    required bytes msg = 1;
    required bytes sig = 2;
}

message SchnorrSig {
    required bytes challenge = 1;
    required bytes response = 2;
}

message Exception {
    required sint32 index = 1;
    required bytes commitment = 2;
}
